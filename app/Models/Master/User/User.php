<?php

namespace App\Models\Master\User;

use App\Models\Master\Faculty;
use App\Models\Master\StudyProgram;
use App\Models\Master\University;
use App\Traits\HasTable;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Illuminate\Support\Facades\Hash;
use Laravel\Sanctum\HasApiTokens;

/**
 *
 * @property int $id
 * @property string $name
 * @property string $email
 * @property string $password
 * @property Detail $detail
 * @property University $university
 * @property Faculty $faculty
 * @property StudyProgram $studyProgram
 */
class User extends Authenticatable
{
    use HasApiTokens, HasFactory, Notifiable, HasTable;

    protected $table = "m_users";

    /**
     * The attributes that are mass assignable.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'name',
        'email',
        'password',
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var array<int, string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * The attributes that should be cast.
     *
     * @var array<string, string>
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
    ];


    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub


        static::saving(function (self $user) {
            $passwordHashed = Hash::make($user->password);
            $user->setAttribute('password', $passwordHashed);
        });
    }

    public function detail(): \Illuminate\Database\Eloquent\Relations\HasOne
    {
        return $this->hasOne(Detail::class, 'user_id', 'id');
    }

    public function faculty(){
        return $this->hasOneThrough(Faculty::class,Detail::class,'user_id','id','id','faculty_id');
    }

    public function university(){
        return $this->hasOneThrough(University::class,Detail::class,'user_id','id','id','university_id');
    }

    public function studyProgram(){
        return $this->hasOneThrough(StudyProgram::class,Detail::class,'user_id','id','id','study_program_id');
    }
}
